{
	"openapi": "3.0.3",
	"info": {
	  "title": "Test collection",
	  "version": "1.0.0",
	  "contact": {}
	},
	"servers": [
	  {
		"url": "https://api.gan.studio"
	  }
	],
	"paths": {
		"/users/login": {
            "post": {
              "description": "This endpoint can be used for login. The response contains an access token and a refresh token which need to be used in the Authorization header in the future API calls.",
			  "operationId": "login_users_login_post",
			  "tags": [
				"User"
			  ],
			  "summary": "Login",
			  "requestBody": {
				"description": "The request body includes user email and password as compulsory fields.",
				"content": {
				  "application/json": {
					"schema": {
					  "$ref": "#/components/schemas/UserLogin"
					}
				  }
				},
				"required": true
			  },
			  "responses": {
				"200": {
				  "description": "Successful Response",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/LoginResponseBody"
					  }
					}
				  }
				},
				"404": {
				  "description": "Entity Not Found Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/EntityNotFoundException"
					  }
					}
				  }
				},
				"422": {
				  "description": "Validation Error",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/ValidationException"
					  }
					}
				  }
				}
			  }
			}
		},
		"/users/create_dynamic_token_v2": {
            "post": {
              "description": "This endpoint can be used to provide access tokens with a desired expiration time.\n <strong>Please save the token as it will be displayed only once.</strong>",
			  "operationId": "create_dynamic_token_v2_users_create_dynamic_token_v2_post",
			  "tags": [
				"User"
			  ],
			  "summary": "Create Dynamic Tokens",
			  "requestBody": {
				"content": {
				  "application/json": {
					"schema": {
					  "$ref": "#/components/schemas/TokenPayloadV2"
					}
				  }
				},
				"required": true
			  },
			  "responses": {
				"200": {
				  "description": "Successful Response",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/DynamicTokenResponse"
					  }
					}
				  }
				},
				"401": {
				  "description": "Unauthorized Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/UnauthorizedException"
					  }
					}
				  }
				},
				"404": {
				  "description": "Entity Not Found Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/EntityNotFoundException"
					  }
					}
				  }
				},
				"422": {
				  "description": "Validation Error",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/ValidationException"
					  }
					}
				  }
				},
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
				"500": {
				  "description": "Process Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/ProcessException"
					  }
					}
				  }
				}
			  },
			  "security": [
				{
				  "JWT": [],
                  "bearerAuth":[]
				}
			  ]
			}
		},
		"/users/revoke_access_token_v2": {
            "delete": {
                "description": "This endpoint can be used to revoke the access from a token that had previously been generated.",
                "operationId": "revoke_access_token_v2_users_revoke_access_token_v2_delete",
                "tags": [
                    "User"
			  ],
			  "summary": "Revoke Access Token",
			  "requestBody": {
				"description": "Name of the token from which access needs to be revoked.",
				"content": {
				  "application/json": {
					"schema": {
					  "$ref": "#/components/schemas/RevokeTokenPayload"
					}
				  }
				},
				"required": true
			  },
			  "responses": {
				"200": {
				  "description": "Successful Response",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/SuccessResponse"
					  }
					}
				  }
				},
				"401": {
				  "description": "Unauthorized Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/UnauthorizedException"
					  }
					}
				  }
				},
				"404": {
				  "description": "Entity Not Found Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/EntityNotFoundException"
					  }
					}
				  }
				},
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
				"500": {
				  "description": "Process Exception",
				  "content": {
					"application/json": {
					  "schema": {
						"$ref": "#/components/schemas/ProcessException"
					  }
					}
				  }
				}
			  },
			  "security": [
				{
				  "JWT": [],
                  "bearerAuth":[]
				}
			  ]
			}
		},
        "/users/list_user_dynamic_tokens": {
            "get": {
              "operationId": "list_user_dynamic_tokens_users_list_user_dynamic_tokens_get",
              "tags": [
                "User"
              ],
              "summary": "List User's Dynamic Tokens",
              "responses": {
                "200": {
                  "description": "Successful Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListUserDynamicTokens"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnauthorizedException"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Entity Not Found Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EntityNotFoundException"
                      }
                    }
                  }
                },
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
                "500": {
                  "description": "Process Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProcessException"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "JWT": [],
                  "bearerAuth":[]
                }
              ]
            }
        },
        "/create_video/bulk": {
            "post": {
              "description": "Using this endpoint you can create the videos in bulk, by passing the tags and their values in request body as payload.",
              "operationId": "create_videos_create_video_bulk_post",
              "tags": [
                "Create Video"
              ],
              "summary": "Create Videos",
              "parameters": [
                {
                  "description": "To create the videos, we need the project_id, which is the unique identifier for a user's project in our systems.",
                  "required": true,
                  "schema": {
                    "title": "Project Id",
                    "type": "string"
                  },
                  "name": "project_id",
                  "in": "query"
                }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "The payload is a list of dictionaries, where all the parameters required for video generation have to provided along with a `unique_id`.\n Eg.\n ```\n[\n\t{\n\t\t\"names\": \"Manash\",\n\t\t\"unique_id\": \"abc123\"\n\t},\n\t{\n\t\t\"names\": \"Manash2\",\n\t\t\"unique_id\": \"cba321\"\n\t}\n]\n```\n In the `example`, we have used the tags: `names` and `unique_id`, depending on the case the individual query parameters would change.",
                              "items": {
                                "$ref": "#/components/schemas/CreateVideoBulkIndividual"
                      },
                      "type": "array",
                      "title": "create_video_bulk_query_set"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/CreateVideoResponse"
                        },
                        "title": "Response To Create Video bulk"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnauthorizedException"
                      }
                    }
                  }
                },
                "402": {
                  "description": "Payment Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PaymentException"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Entity Not Found Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EntityNotFoundException"
                      }
                    }
                  }
                },
                "422": {
                  "description": "Validation Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ValidationException"
                      }
                    }
                  }
                },
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
                "500": {
                  "description": "Process Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProcessException"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "JWT": [],
                  "bearerAuth":[]
                }
              ]
            }
        },
        "/projects/{project_id}/inference/{inference_id}/video_status": {
            "get": {
              "operationId": "get_video_status_projects__project_id__inference__inference_id__video_status_get",
              "tags": [
                "Inference"
              ],
              "summary": "Get status for an inference_id",
              "description": "This endpoint can be used to fetch the status of a video by passing the `inference_id` as the query parameter.",
              "parameters": [
                {
                  "required": true,
                  "schema": {
                    "title": "Inference Id",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": "inference_id",
                  "description": "The inference_id of the video for fetching its video status.",
                  "in": "path"
                },
                {
                    "required": true,
                    "schema": {
                      "title": "Project Id",
                      "type": "string"
                    },
                    "name": "project_id",
                    "description": "The project_id of the video for fetching its video status.",
                    "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/VideoStatusResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnauthorizedException"
                      }
                    }
                  }
                },
                "422": {
                  "description": "Validation Error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/VideoStatusFailedResponse422"
                      }
                    }
                  }
                },
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
                "500": {
                  "description": "Failure",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/VideoStatusFailedResponse500"
                      }
                    }
                  }
                },
                "503": {
                  "description": "Validation Error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/VideoStatusFailedResponse503"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "JWT": [],
                  "bearerAuth" :[]
                }
              ]
            }
        },
        "/projects/{project_id}/webhook": {
            "post": {
              "description": "This endpoint sets up a webhook for getting the status of the videos. \n \n Videos are created in batches. We will do a POST request to the webhook that you would provide us.\n The payload is shown below.\n ``` \n{\n\t'abc123': {\n\t\t\t'video_url':'<Video_S3_URL>',\n\t\t\t'status':True,\n\t\t\t'inference_id': 'Inference_Id'\n\t},\n\t'avs3456': {\n\t\t\t'status': False,\n\t\t\t'inference_id':'3eeb8a96-94fa-4c1b-b827-20dc6a2a0c3c',\n\t\t\t'error': {\n\t\t\t\t'status_code': 503,\n\t\t\t\t'message': 'Failed to generate video for inference id:3eeb8a96-94fa-4c1b-b827-20dc6a2a0c3c. Please try again later!'\n\t\t\t}\n\t}\n}\n``` \nIn the above example, video was successfully generated for unique_id `'abc123'` and is ready for download. Video could not be generated for unique_id `'avs3456'`. We will return error details",
              "operationId": "update_project_webhook_post_projects__project_id__webhook_post",
              "tags": [
                "Project"
              ],
              "summary": "Set Inference Webhook",
              "parameters": [
                {
                  "required": true,
                  "description": "The project_id for which the webhook needs to be set.",
                  "schema": {
                    "title": "Project Id",
                    "type": "string"
                  },
                  "name": "project_id",
                  "in": "path"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/InferenceWebhook"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InferenceWebhook"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnauthorizedException"
                      }
                    }
                  }
                },
                "403": {
                  "description": "Authentication Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AuthenticationException"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Entity Not Found Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EntityNotFoundException"
                      }
                    }
                  }
                },
                "422": {
                  "description": "Validation Error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ValidationException"
                      }
                    }
                  }
                },
				"429":{
					"description": "Rate Limit exceeded Exception",
					"content": {
					  "application/json": {
						"schema": {
						  "$ref": "#/components/schemas/RateLimitException"
						}
					  }
					}
				},
                "500": {
                  "description": "Process Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProcessException"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "JWT": [],
                  "bearerAuth" :[]
                }
              ]
            }
        },
        "/projects/v2": {
              "get": {
              "description": "This endpoint returns a list of all projects of the user.",
              "operationId": "get_projects_projects_get",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                          "$ref": "#/components/schemas/GetProjectsResponseV2"
                      }
                    }
                  },
                  "description": "Successful Response"
                },
                "401": {
                  "description": "Unauthorized Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnauthorizedException"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Entity Not Found Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EntityNotFoundException"
                      }
                    }
                  }
                },
				"429":{
				  "description": "Rate Limit exceeded Exception",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/RateLimitException"
                      }
                    }
                  }
				}
              },
              "summary": "Get Projects",
              "tags": [
                "Project"
              ],
              "x-internal": false,
              "security": [
                {
                  "JWT": [],
                  "bearerAuth" :[]
                }
              ]
            }
        }
	},
	"components": {
		"schemas": {
            "CreateVideoResponse":{
                "type": "array",
				"required" :["IndividualVideoReponse"],
                "items": {
					"IndividualVideoReponse":{
						"schema":{
							"$ref": "#/components/schemas/CreateVideoIndividialResponse"
						}
					}
                }
            },
            "CreateVideoIndividialResponse":{
                "properties": {
                    "video_url": {
                      "title": "Created At",
                      "type": "string",
					  "description": "S3 url for the video file."
                    },
                    "audio_url": {
                      "title": "Description",
                      "type": "string",
					  "description": "S3 url for the audio file."
                    },
                    "inference_id": {
                        "title": "Description",
                        "type": "string",
						"description": "`inference_id` is a unique identifer to map the generated videos with the users."
                    },
                    "project_id": {
                        "title": "Description",
                        "type": "string",
						"description": "`project_id` is a unique identifier for a project created by the user, under a project multiple inference videos can be generated."
                    },
                    "unique_id": {
                        "title": "Description",
                        "type": "string",
						"description" : "This corresponds to the `unique_id` sent in the request body. It can be used by the user's to uniquely identify the generation status for a video with the particular tags."
                    },
                    "smart_url": {
                        "title": "Description",
                        "type": "string",
						"description" : "These are the links to videos hosted on our landing page, ."
                    },
                    "permalink": {
                        "title": "Description",
                        "type": "string",
						"description" :"Permalinks are links to the generated inferences that do not expire."
                    },
                    "thumbnail_url": {
                        "title": "Description",
                        "type": "string",
						"description":"Link to personalized thumbnail (if enabled) else default project thumbnail"
                    }
                  },
                  "required": [
                    "video_url",
                    "audio_url",
                    "inference_id",
                    "project_id",
                    "unique_id",
                    "smart_url",
                    "permalink",
                    "thumbnail_url"
                  ],
                  "title": "CreateVideoIndividialResponse",
                  "type": "object"
            },
			"SuccessResponse": {
			  "title": "SuccessResponse",
			  "type": "object",
			  "required": [
				"success"
			  ],
			  "properties": {
				"success": {
				  "title": "success",
				  "type": "boolean",
				  "default": true,
				  "description" : "Success status of the revoke request made by the user."
				}
			  }
			},
			"LoginResponseBody": {
			  "title": "LoginResponseBody",
			  "type": "object",
			  "required": [
				"access_token",
				"refresh_token"
			  ],
			  "properties": {
				"access_token": {
				  "title": "access_token",
				  "type": "string",
                  "description": "On successful login an access token is returned, which needs to be saved and used as auth token in the future api calls."
				},
				"refresh_token": {
				  "title": "refresh_token",
				  "type": "string",
                  "description": "This endpoint also returns a refresh token for the user."
				}
			  }
			},
			"EntityNotFoundException": {
			  "title": "EntityNotFoundException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "404"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "EntityNotFoundException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"AuthenticationException": {
			  "title": "AuthenticationException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "403"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "AuthenticationException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"ValidationException": {
			  "title": "ValidationException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "422"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "ValidationException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"ProcessException": {
			  "title": "ProcessException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "500"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "ProcessException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"PaymentException": {
			  "title": "PaymentException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "402"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "PaymentException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"UnauthorizedException": {
			  "title": "UnauthorizedException",
			  "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "401"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "UnauthorizedException"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"CreateVideoBulkIndividual": {
			  "title": "CreateVideoBulkIndividual",
              "type": "object",
			  "properties": {},
			  "xml": {}
			},
			"CreateVideoBulk": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/CreateVideoBulkIndividual"
			  },
			  "minItems": 1,
			  "maxItems": 1,
			  "minLength": 1,
			  "maxLength": 1
			},
			"DeliveryType": {
			  "title": "DeliveryType",
			  "enum": [
				"gan_studio_urls",
				"imi_connect",
				"hubspot",
				"klaviyo",
				"interakt",
				"instagram",
				"slack",
				"mailchimp_email",
				"twilio",
				"whatsapp_interakt",
				"inference_webhook",
				"custom_delivery",
				"apollo",
				"outreach",
				"follow_up_boss",
				"podio",
				"keap",
				"salesforce",
				"podium",
				"zapier_webhook"
			  ],
			  "type": "string",
			  "description": "An enumeration."
			},
			"HTTPValidationError": {
			  "title": "HTTPValidationError",
			  "type": "object",
			  "properties": {
				"detail": {
				  "title": "Detail",
				  "type": "array",
				  "items": {
					"$ref": "#/components/schemas/ValidationError"
				  }
				}
			  }
			},
			"UserLogin": {
			  "title": "UserLogin",
			  "required": [
				"email",
				"password"
			  ],
			  "type": "object",
			  "properties": {
				"email": {
				  "title": "Email",
				  "type": "string",
                  "description": "The email of the user is required to login."
				},
				"password": {
				  "title": "Password",
				  "type": "string",
                  "description": "The password of the user is a compulsory requirement for login."
				}
			  },
			  "xml": {}
			},
			"ValidationError": {
			  "title": "ValidationError",
			  "required": [
				"loc",
				"msg",
				"type"
			  ],
			  "type": "object",
			  "properties": {
				"loc": {
				  "title": "Location",
				  "type": "array",
				  "items": {
					"type": "string"
				  }
				},
				"msg": {
				  "title": "Message",
				  "type": "string"
				},
				"type": {
				  "title": "Error Type",
				  "type": "string"
				}
			  }
			},
			"RateLimitException":{
			  "title": "RateLimitException",
		      "type": "object",
			  "required": [
				"message",
				"error",
				"statusCode"
			  ],
			  "properties": {
				"statusCode": {
				  "title": "statusCode",
				  "type": "integer",
				  "default": "429"
				},
				"error": {
				  "title": "error",
				  "type": "string",
				  "default": "RateLimitExceeded"
				},
				"message": {
				  "title": "message",
				  "type": "string",
				  "default": "<Error_Message>"
				}
			  }
			},
			"ExpiryTime": {
			  "title": "ExpiryTime",
			  "type": "object",
			  "description":"This refers to the time after which your access token would expire.",
			  "required": [
				"minutes",
				"hours",
				"days"
			  ],
			  "properties": {
				"days": {
				  "title": "Days",
				  "type": "integer"
				},
				"hours": {
				  "title": "Hours",
				  "type": "integer"
				},
				"minutes": {
				  "title": "Minutes",
				  "type": "integer"
				}
			  }
			},
			"DynamicTokenResponse": {
			  "title": "DynamicTokenResponse",
			  "required": [
				"access_token",
				"token_name",
				"expiration_time",
				"creation_time"
			  ],
			  "type": "object",
			  "properties": {
				"access_token": {
				  "title": "Access Token",
				  "type": "string",
                  "description" : "This access token has the requested expiration time and `must be saved` by the user."
				},
				"token_name":{
					"title": "Token name",
				  	"type": "string"
				},
				"expiration_time":{
					"title":"Expiration Time",
					"description" :"Expiration timestamp of the token."
				},
				"creation_time":{
					"title" : "Creation Time",
					"description" : "Creation timestamp of the token."
				}
			  },
			  "xml": {}
			},
			"TokenPayload": {
			  "title": "TokenPayload",
			  "type": "object",
			  "properties": {
				"never_expire": {
				  "title": "Never Expire",
				  "type": "boolean"
				},
				"expiry_time": {
				  "$ref": "#/components/schemas/ExpiryTime"
				}
			  }
			},
			"ProjectResponse": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ProjectResponseIndividial"
			  },
			  "minItems": 1,
			  "maxItems": 1,
			  "minLength": 1,
			  "maxLength": 1
			},
			"ProjectResponseIndividial": {
			  "properties": {
				"created_at": {
				  "format": "date-time",
				  "title": "Created At",
				  "type": "string",
				  "description": "Creation timestamp"
				},
				"inference_webhook": {
				  "$ref": "#/components/schemas/InferenceWebhook"
				},
				"language": {
				  "title": "Language",
				  "type": "string"
				},
				"project_id": {
				  "format": "uuid",
				  "title": "Project Id",
				  "type": "string",
				  "description":"This refers to the project's unique id."
				},
				"status": {
				  "title": "Status",
				  "type": "string"
				},
				"tags": {
				  "$ref": "#/components/schemas/ProjectTags"
				},
				"template": {
				  "$ref": "#/components/schemas/ProjectTemplate"
				},
				"template_id": {
				  "title": "Template Id",
				  "type": "string"
				},
				"template_type": {
				  "title": "Template Type",
				  "type": "string"
				},
				"thumbnail": {
				  "title": "Thumbnail",
				  "type": "string",
				  "description": "Cloudfront link to personalized thumbnail (if enabled) else default project thumbnail."
				},
				"title": {
				  "title": "Title",
				  "type": "string",
				  "description" : "The title of the project is also returned in the reponse body."
				},
				"updated_at": {
				  "format": "date-time",
				  "title": "Updated At",
				  "type": "string",
				  "description" :"Updation timestamp"
				},
				"user_id": {
				  "format": "uuid",
				  "title": "User Id",
				  "type": "string",
				  "description":"This refers to the user's unique id."
				}
			  },
			  "required": [
				"user_id",
				"project_id",
				"title",
				"created_at",
				"updated_at"
			  ],
			  "title": "ProjectResponse",
			  "type": "object"
			},
			"ProjectTags": {
			  "description" : "The tags associated with the particular video.",
			  "properties": {
				"colors": {
				  "items": {
					"type": "string"
				  },
				  "title": "Colors",
				  "type": "array"
				},
				"names": {
				  "description" : "The tag names for the videos. These can be used while creating videos by passing the tags and there respective values in the payload.",
				  "items": {
					"type": "string"
				  },
				  "title": "Names",
				  "type": "array"
				}
			  },
			  "title": "ProjectTags",
			  "type": "object"
			},
			"InferenceWebhook": {
			   "title": "InferenceWebhook",
			   "description" : "This value corresponds to the webhook configured with this particular project.",
			   "required": [
				"enable",
				"url"
			  ],
			  "type": "object",
			  "properties": {
				"enable": {
				  "title": "Enable",
				  "type": "boolean",
				  "default": true
				},
				"url": {
				  "title": "Url",
				  "type": "string",
				  "description": "The url of your webhook."
				},
				"Authorization": {
				  "title": "Authorization",
				  "type": "string",
				  "default": "Bearer <Insert_the_token_here>",
				  "description": "The token must follow the `bearer` format."
				}
			  },
			  "xml": {}
			},
			"ProjectTemplate": {
			  "properties": {
				"calendly": {
				  "title": "Calendly",
				  "type": "string"
				},
				"cta_link": {
				  "$ref": "#/components/schemas/CTALink"
				},
				"cta_text": {
				  "title": "Cta Text",
				  "type": "string"
				},
				"google_form": {
				  "title": "Google Form",
				  "type": "string"
				},
				"logo": {
				  "$ref": "#/components/schemas/LogoTemplate"
				},
				"media": {
				  "default": {},
				  "title": "Media",
				  "type": "object"
				},
				"meta_description": {
				  "title": "Meta Description",
				  "type": "string"
				},
				"meta_title": {
				  "title": "Meta Title",
				  "type": "string"
				},
				"razorpay": {
				  "title": "Razorpay",
				  "type": "string"
				},
				"text": {
				  "title": "Text",
				  "type": "string"
				},
				"title": {
				  "title": "Title",
				  "type": "string"
				}
			  },
			  "title": "ProjectTemplate",
			  "type": "object"
			},
			"CTALink": {
			  "properties": {
				"personalized_links": {
				  "default": false,
				  "title": "Personalized Links",
				  "type": "boolean"
				},
				"url": {
				  "title": "Url",
				  "type": "string"
				}
			  },
			  "title": "CTALink",
			  "type": "object"
			},
			"LogoTemplate": {
			  "properties": {
				"s3_object": {
				  "default": false,
				  "title": "S3 Object",
				  "type": "boolean"
				},
				"url": {
				  "title": "Url",
				  "type": "string"
				}
			  },
			  "title": "LogoTemplate",
			  "type": "object"
			},
			"TokenPayloadV2": {
			  "title": "TokenPayloadV2",
			  "required": [
				"expiry_time",
				"token_name"
			  ],
			  "type": "object",
			  "properties": {
				"expiry_time": {
				  "$ref": "#/components/schemas/ExpiryTime",
                  "description" : "The desired expiration time for the access token must follow such a format."
				},
				"token_name": {
				  "title": "Token Name",
				  "type": "string",
                  "description": "The name that you want to assign to the token must be sent with the request. A user can't have two valid tokens with the same name."
				}
			  },
			  "xml": {}
			},
			"RevokeTokenPayload": {
			  "title": "RevokeTokenPayload",
			  "required": [
				"token_name"
			  ],
			  "type": "object",
			  "properties": {
				"token_name": {
				  "title": "Token Name",
				  "type": "string",
                  "description":"The name of the token from which the access needs to be revoked. This is a compulsory field in the request body."
				}
			  },
			  "xml": {}
			},
			"VideoStatusResponse": {
			  "title": "VideoStatusResponse",
			  "required": [
				"gen_status",
				"video_url",
				"permalink",
				"thumbnail_url",
				"smart_url",
				"error"
			  ],
			  "type": "object",
			  "properties": {
				"gen_status": {
				  "title": "Gen Status",
				  "type": "string",
                  "description":"This indicates the current generation status of the particular inference,eg. nexrender_pending, succeeded etc."
				},
				"video_url": {
				  "title": "Video Url",
				  "type": "string",
                  "description":"S3 url for the video file."
				},
				"permalink": {
				  "title": "Permalink",
				  "type": "string",
				  "description":"Permalinks are links to the generated inferences that do not expire."
				},
				"thumbnail_url": {
				  "title": "Thumbnail Url",
				  "type": "string",
				  "description":"Cloudfront link to personalized thumbnail (if enabled) else default project thumbnail."
				},
				"smart_url": {
				  "title": "Smart Url",
				  "type": "string",
				  "description" : "These are the links to videos on our landing page."
				},
				"error":{
					"title": "error",
					"type" : "object",
					"default" : "None",
					"description" : "It corresponds to the error in video generation(if any). Otherwise this field in response body has a value `null`."
				}
			  },
			  "xml": {}
			},
			"VideoStatusFailedResponse500": {
			  "title": "VideoStatusFailedResponse500",
			  "required": [
				"gen_status",
				"error"
			  ],
			  "properties": {
				"gen_status": {
				  "title": "Gen Status",
				  "type": "string",
				  "default": "failed"
				},
				"error": {
				  "required": [
					"status_code",
					"message"
				  ],
				  "properties": {
					"status_code": {
					  "title": "status_code",
					  "type": "string",
					  "default": "500"
					},
					"message": {
					  "title": "message",
					  "type": "string",
					  "default": "Failed to generate video for inference id: <Inference_Id>. Please contact admin!"
					}
				  }
				}
			  }
			},
			"VideoStatusFailedResponse422": {
			  "title": "VideoStatusFailedResponse422",
			  "required": [
				"gen_status",
				"error"
			  ],
			  "properties": {
				"gen_status": {
				  "title": "Gen Status",
				  "type": "string",
				  "default": "failed"
				},
				"error": {
				  "required": [
					"status_code",
					"message"
				  ],
				  "properties": {
					"status_code": {
					  "title": "status_code",
					  "type": "string",
					  "default": "422"
					},
					"message": {
					  "title": "message",
					  "type": "string",
					  "default": "Invalid payload for inference id: <Inference_Id>. Please rectify payload and try again."
					}
				  }
				}
			  }
			},
			"VideoStatusFailedResponse503": {
			  "title": "VideoStatusFailedResponse422",
			  "required": [
				"gen_status",
				"error"
			  ],
			  "properties": {
				"gen_status": {
				  "title": "Gen Status",
				  "type": "string",
				  "default": "failed"
				},
				"error": {
				  "required": [
					"status_code",
					"message"
				  ],
				  "properties": {
					"status_code": {
					  "title": "status_code",
					  "type": "string",
					  "default": "503"
					},
					"message": {
					  "title": "message",
					  "type": "string",
					  "default": "Failed to generate video for inference id: <Inference_Id>. Please try again later!"
					}
				  }
				}
			  }
			},
			"app__schemas__inference__ErrorDetails": {
			  "title": "ErrorDetails",
			  "type": "object",
			  "properties": {
				"status_code": {
				  "title": "Status Code",
				  "type": "integer",
				  "default": "503"
				},
				"message": {
				  "title": "Message",
				  "type": "string",
				  "default": "Failed to generate video for inference id: <INFERENCE_ID>. Please try again later!"
				}
			  }
			},
			"ProjectType": {
			  "title": "ProjectType",
			  "enum": [
				"PERSONALIZED",
				"PERSONALIZED_INSTANT",
				"NON_PERSONALIZED"
			  ],
			  "description": "An enumeration.",
			  "xml": {}
			},
			"GetProjectsResponseV2": {
			  "title": "GetProjectsResponseV2",
			  "required": [
				"data",
				"size",
				"unpublished_projects"
			  ],
			  "type": "object",
			  "properties": {
				"data": {
				  "title": "Data",
				  "type": "array",
				  "items": {
					"$ref": "#/components/schemas/ProjectResponsePartial"
				  }
				},
				"size": {
				  "title": "Size",
				  "type": "integer",
				  "description" : "Count of projects made by the user."
				},
				"unpublished_projects": {
				  "title": "Unpublished Projects",
				  "type": "integer", 
				  "description" : "Count of unpublished projects of the user."
				}
			  },
			  "xml": {}
			},
			"ProjectResponsePartial": {
			  "title": "ProjectResponsePartial",
			  "required": [
				"user_id",
				"project_id",
				"title",
				"project_type",
				"created_at",
				"updated_at"
			  ],
			  "type": "object",
			  "properties": {
				"user_id": {
				  "title": "User Id",
				  "format": "uuid",
                  "description" :"This refers to the user's unique id."
				},
				"project_id": {
				  "title": "Project Id",
				  "type": "string",
				  "format": "uuid",
				  "description" :"This refers to the project's unique id."
				},
				"title": {
				  "title": "Title",
				  "type": "string",
				  "description" : "The title of the project is also returned in the response body."
				},
				"project_type": {
				  "$ref": "#/components/schemas/ProjectType",
				  "description": "This refers to the Project type, eg. PERSONALIZED, NON_PERSONALIZED, etc."
				},
				"thumbnail": {
				  "title": "Thumbnail",
				  "type": "string",
				  "description": "Cloudfront link to personalized thumbnail (if enabled) else default project thumbnail."
				},
				"thumbnails": {
				  "$ref": "#/components/schemas/Thumbnails"
				},
				"status": {
				  "title": "Status",
				  "type": "string"
				},
				"language": {
				  "title": "Language",
				  "type": "string"
				},
				"tags": {
				  "$ref": "#/components/schemas/ProjectTags"
				},
				"available_credits": {
				  "title": "Available Credits",
				  "type": "integer",
				  "description" : "The user's available credits."
				},
				"utilised_credits": {
				  "title": "Utilised Credits",
				  "type": "integer",
				  "description" : "The user's utilized credits."
				},
				"created_at": {
				  "title": "Created At",
				  "type": "string",
				  "format": "date-time",
				  "description" : "Project creation timestamp"
				},
				"updated_at": {
				  "title": "Updated At",
				  "type": "string",
				  "format": "date-time",
				  "description" : "Project Updation timestamp"
				},
				"video": {
				  "title": "Video",
				  "type": "string",
				  "description" :"S3 link to the project video."
				},
				"training_job_id": {
				  "title": "Training Job Id",
				  "type": "string"
				},
				"srt": {
				  "title": "Srt",
				  "type": "string"
				},
				"srt_target_language": {
				  "title": "Srt Target Language",
				  "type": "string"
				},
				"voice_path": {
				  "title": "Voice Path",
				  "type": "string",
				  "description" :  "S3 link to the voice path of the project video."
				},
				"smart_url": {
				  "title": "Smart Url",
				  "type": "string",
				  "description" : "These are the links to videos on our landing page."
				},
				"recording_script": {
				  "title": "Recording Script",
				  "type": "string"
				},
				"data_plane_id": {
				  "title": "Data Plane Id",
				  "type": "string",
				  "format": "uuid"
				}
			  },
			  "xml": {}
			},
			"Thumbnails": {
			  "title": "Thumbnails",
			  "type": "object",
			  "description" : "Cloudfront links to the thumbnails.",
			  "properties": {
				"thumbnail_png": {
				  "title": "Thumbnail Png",
				  "type": "string",
				  "default": ""
				},
				"thumbnail_play_png": {
				  "title": "Thumbnail Play Png",
				  "type": "string",
				  "default": ""
				},
				"thumbnail_gif": {
				  "title": "Thumbnail Gif",
				  "type": "string",
				  "default": ""
				},
				"thumbnail_play_gif": {
				  "title": "Thumbnail Play Gif",
				  "type": "string",
				  "default": ""
				},
				"custom_thumbnail": {
				  "title": "Custom Thumbnail",
				  "type": "string",
				  "default": ""
				}
			  }
			},
			"ListUserDynamicTokens": {
			  "title": "ListUserDynamicTokens",
			  "required": [
				"tokens"
			  ],
			  "type": "object",
			  "properties": {
                  "tokens": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ListUserDynamicTokensIndividual"
                        },
                    "description": "This is a list consisting of all the tokens generated by the user.",
				    "minItems": 1,
				    "maxItems": 2
				}
			  }
			},
			"ListUserDynamicTokensIndividual": {
			  "title": "ListUserDynamicTokensIndividual",
			  "required": [
				"token_name",
				"expiration_time",
				"creation_time"
			  ],
			  "properties": {
				"token_name": {
				  "type": "string"
				},
				"expiration_time": {
				  "description":"Expiration timestamp of the token."
				},
				"creation_time":{
				  	"description":"Creation timestamp of the token."
				}
			  }
			}
		  },
        "securitySchemes": {
            "bearerAuth": {
            "type": "http",
            "scheme": "bearer"
        }
	  }
	},
	"tags": [
		{
			"name": "Project",
			"description": "Operations related to projects."
		},
		{
			"name": "User",
			"description": "Operations related to users."
		}
	]
}